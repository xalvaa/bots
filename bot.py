from telegram import Update, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from typing import override, Self, Never
import datetime
from pathlib import Path

TOKEN = "8026101501:AAG2oj032H-QotYbYAHnhcOES2niIu43rCo"
ADMIN_CHAT_ID = "@KD_Swetty"
APPLICATIONS_FILE = Path("applications.txt")

class TigresBot:
    def __init__(self: Self, token: str) -> None:
        self.updater = Updater(token)
        self.dispatcher = self.updater.dispatcher
        self._setup_handlers()

    def _setup_handlers(self: Self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @override"""
        handlers = [
            (CommandHandler("start", self.start)),
            (MessageHandler(Filters.regex(r"^üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), self.application)),
            (MessageHandler(Filters.regex(r"^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ$"), self.handle_message)),
            (MessageHandler(Filters.regex(r"^‚ùì FAQ$"), self.handle_message)),
            (MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        ]
        
        for handler in handlers:
            self.dispatcher.add_handler(handler)

    @override
    def start(self: Self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å typed dict"""
        user_info: dict[str, str] = {
            "first_name": update.message.from_user.first_name,
            "username": update.message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        }
        
        update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ù–µ–≤—Å–∫–∏–µ –¢–∏–≥—Ä—ã'! üêØ‚öΩ\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user_info['first_name']}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.main_menu_keyboard()
        )

    def main_menu_keyboard(self: Self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º type hints"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ"), KeyboardButton("‚ùì FAQ")]
        ], resize_keyboard=True)

    @override
    def application(self: Self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pathlib"""
        update.message.reply_text(
            "–î–ª—è –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "1. –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞\n"
            "2. –í–æ–∑—Ä–∞—Å—Ç\n"
            "3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, 8 –ª–µ—Ç, +79111234567</i>",
            parse_mode="HTML"
        )
        context.user_data['waiting_for_application'] = True

    def notify_admin(self: Self, text: str, user: dict) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å typed Bot"""
        try:
            admin_bot: Bot = Bot(TOKEN)
            message = (
                f"üöÄ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> üöÄ\n\n{text}\n\n"
                f"üë§ @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üïí {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            admin_bot.send_message(ADMIN_CHAT_ID, message, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e!r}")

    @override
    def handle_message(self: Self, update: Update, context: CallbackContext) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å match-case (Python 3.10+)"""
        if context.user_data.get('waiting_for_application'):
            self._process_application(update, context)
            return

        match update.message.text:
            case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ":
                self._send_school_info(update)
            case "‚ùì FAQ":
                self._send_faq(update)
            case _:
                update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
                    reply_markup=self.main_menu_keyboard()
                )

    def _process_application(self: Self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pathlib"""
        app_text = update.message.text
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pathlib
        with APPLICATIONS_FILE.open("a", encoding="utf-8") as f:
            f.write(f"{timestamp} - {app_text}\n")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notify_admin(app_text, {
            "username": update.message.from_user.username,
            "id": update.message.from_user.id
        })
        
        update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            reply_markup=self.main_menu_keyboard()
        )
        context.user_data['waiting_for_application'] = False

    def _send_school_info(self: Self, update: Update) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ —Å f-strings"""
        update.message.reply_text(
            f"üèüÔ∏è <b>–ù–µ–≤—Å–∫–∏–µ –¢–∏–≥—Ä—ã</b>\n\n"
            f"üìç –ê–¥—Ä–µ—Å: –°–ü–±, —É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 1\n"
            f"üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å 9:00-21:00\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: +7 (911) 123-45-67",
            parse_mode="HTML"
        )

    def _send_faq(self: Self, update: Update) -> None:
        """FAQ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        update.message.reply_text("""
‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

1. <b>–í–æ–∑—Ä–∞—Å—Ç:</b> 5-16 –ª–µ—Ç
2. <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 3000 —Ä—É–±/–º–µ—Å
3. <b>–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:</b> –§–æ—Ä–º–∞ + –±—É—Ç—Å—ã
4. <b>–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
        """, parse_mode="HTML")

    def run(self: Self) -> Never:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π Never"""
        print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.updater.start_polling()
        self.updater.idle()

if __name__ == "__main__":
    bot = TigresBot(TOKEN)
    bot.run()
